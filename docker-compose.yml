version: '3.9'

services:
  # ========== Infrastructure ==========
  
  postgres:
    image: postgres:15-alpine
    container_name: crypto-postgres
    environment:
      POSTGRES_USER: crypto_user
      POSTGRES_PASSWORD: crypto_password
      POSTGRES_DB: crypto_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crypto_user -d crypto_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - crypto-network

  redis:
    image: redis:7-alpine
    container_name: crypto-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - crypto-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: crypto-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - crypto-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: crypto-kafka
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions.sh", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - crypto-network

  # ========== Backend Services ==========

  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    container_name: crypto-user-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://crypto_user:crypto_password@postgres:5432/crypto_db
      REDIS_URL: redis://redis:6379/0
      JWT_SECRET_KEY: your-secret-key-change-in-production
      JWT_ALGORITHM: HS256
      JWT_EXPIRATION_HOURS: 24
      LOG_LEVEL: INFO
      ENVIRONMENT: development
    ports:
      - "8001:8001"
    networks:
      - crypto-network
    restart: on-failure

  market-data-service:
    build:
      context: .
      dockerfile: market-data-service/Dockerfile
    container_name: crypto-market-data-service
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      REDIS_URL: redis://redis:6379/0
      KAFKA_BROKERS: kafka:29092
      BINANCE_WS_URL: wss://stream.binance.com:9443/ws
      LOG_LEVEL: INFO
      ENVIRONMENT: development
    ports:
      - "8002:8002"
    networks:
      - crypto-network
    restart: on-failure

  analytics-service:
    build:
      context: .
      dockerfile: analytics-service/Dockerfile
    container_name: crypto-analytics-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://crypto_user:crypto_password@postgres:5432/crypto_db
      REDIS_URL: redis://redis:6379/0
      KAFKA_BROKERS: kafka:29092
      LOG_LEVEL: INFO
      ENVIRONMENT: development
    ports:
      - "8003:8003"
    networks:
      - crypto-network
    restart: on-failure

  sentiment-service:
    build:
      context: .
      dockerfile: sentiment-service/Dockerfile
    container_name: crypto-sentiment-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://crypto_user:crypto_password@postgres:5432/crypto_db
      REDIS_URL: redis://redis:6379/0
      KAFKA_BROKERS: kafka:29092
      NEWSAPI_KEY: ${NEWSAPI_KEY:-demo}
      HUGGINGFACE_MODEL: distilbert-base-uncased-finetuned-sst-2-english
      LOG_LEVEL: INFO
      ENVIRONMENT: development
    ports:
      - "8004:8004"
    networks:
      - crypto-network
    restart: on-failure

  portfolio-service:
    build:
      context: .
      dockerfile: portfolio-service/Dockerfile
    container_name: crypto-portfolio-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://crypto_user:crypto_password@postgres:5432/crypto_db
      REDIS_URL: redis://redis:6379/0
      LOG_LEVEL: INFO
      ENVIRONMENT: development
    ports:
      - "8005:8005"
    networks:
      - crypto-network
    restart: on-failure

  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: crypto-api-gateway
    depends_on:
      - user-service
      - market-data-service
      - analytics-service
      - sentiment-service
      - portfolio-service
    environment:
      USER_SERVICE_URL: http://user-service:8001
      MARKET_SERVICE_URL: http://market-data-service:8002
      ANALYTICS_SERVICE_URL: http://analytics-service:8003
      SENTIMENT_SERVICE_URL: http://sentiment-service:8004
      PORTFOLIO_SERVICE_URL: http://portfolio-service:8005
      JWT_SECRET_KEY: your-secret-key-change-in-production
      LOG_LEVEL: INFO
      ENVIRONMENT: development
    ports:
      - "8000:8000"
    networks:
      - crypto-network
    restart: on-failure

  # ========== Frontend ==========

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: crypto-frontend
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_WS_URL: ws://localhost:8000
      NODE_ENV: production
    networks:
      - crypto-network
    restart: on-failure

volumes:
  postgres_data:
  redis_data:

networks:
  crypto-network:
    driver: bridge
