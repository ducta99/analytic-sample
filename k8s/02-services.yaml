---
# User Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: crypto
  labels:
    app: user-service
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: user-service
        image: crypto-user-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8001
        env:
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: crypto-config
              key: LOG_LEVEL
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: crypto-config
              key: ENVIRONMENT
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: crypto-config
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: crypto-config
              key: REDIS_URL
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: crypto-secrets
              key: JWT_SECRET_KEY
        - name: JWT_ALGORITHM
          valueFrom:
            configMapKeyRef:
              name: crypto-config
              key: JWT_ALGORITHM
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3

---
# User Service Service
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: crypto
spec:
  selector:
    app: user-service
  ports:
  - port: 8001
    targetPort: 8001
  type: ClusterIP

---
# API Gateway Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: crypto
  labels:
    app: api-gateway
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: api-gateway
        image: crypto-api-gateway:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
        env:
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: crypto-config
              key: LOG_LEVEL
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: crypto-config
              key: ENVIRONMENT
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: crypto-secrets
              key: JWT_SECRET_KEY
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5

---
# API Gateway Service
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: crypto
spec:
  selector:
    app: api-gateway
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
  type: LoadBalancer

---
# Market Data Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: market-data-service
  namespace: crypto
  labels:
    app: market-data-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: market-data-service
  template:
    metadata:
      labels:
        app: market-data-service
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: market-data-service
        image: crypto-market-data-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8002
        env:
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: crypto-config
              key: LOG_LEVEL
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: crypto-config
              key: KAFKA_BROKERS
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: crypto-config
              key: REDIS_URL
        resources:
          requests:
            cpu: 1000m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 10
          periodSeconds: 5

---
# Market Data Service Service
apiVersion: v1
kind: Service
metadata:
  name: market-data-service
  namespace: crypto
spec:
  selector:
    app: market-data-service
  ports:
  - port: 8002
    targetPort: 8002
  type: ClusterIP

---
# Analytics Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: analytics-service
  namespace: crypto
  labels:
    app: analytics-service
spec:
  replicas: 3
  selector:
    matchLabels:
      app: analytics-service
  template:
    metadata:
      labels:
        app: analytics-service
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: analytics-service
        image: crypto-analytics-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8003
        env:
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: crypto-config
              key: LOG_LEVEL
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: crypto-config
              key: KAFKA_BROKERS
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: crypto-config
              key: REDIS_URL
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: crypto-config
              key: DATABASE_URL
        resources:
          requests:
            cpu: 2000m
            memory: 2Gi
          limits:
            cpu: 4000m
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 10
          periodSeconds: 5

---
# Analytics Service Service
apiVersion: v1
kind: Service
metadata:
  name: analytics-service
  namespace: crypto
spec:
  selector:
    app: analytics-service
  ports:
  - port: 8003
    targetPort: 8003
  type: ClusterIP

---
# Sentiment Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sentiment-service
  namespace: crypto
  labels:
    app: sentiment-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sentiment-service
  template:
    metadata:
      labels:
        app: sentiment-service
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: sentiment-service
        image: crypto-sentiment-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8004
        env:
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: crypto-config
              key: LOG_LEVEL
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: crypto-config
              key: KAFKA_BROKERS
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: crypto-config
              key: DATABASE_URL
        - name: NEWSAPI_KEY
          valueFrom:
            secretKeyRef:
              name: crypto-secrets
              key: NEWSAPI_KEY
        resources:
          requests:
            cpu: 1000m
            memory: 2Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8004
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8004
          initialDelaySeconds: 10
          periodSeconds: 5

---
# Sentiment Service Service
apiVersion: v1
kind: Service
metadata:
  name: sentiment-service
  namespace: crypto
spec:
  selector:
    app: sentiment-service
  ports:
  - port: 8004
    targetPort: 8004
  type: ClusterIP
