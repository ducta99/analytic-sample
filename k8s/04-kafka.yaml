---
# PersistentVolume for Kafka
apiVersion: v1
kind: PersistentVolume
metadata:
  name: kafka-pv
  namespace: crypto
spec:
  capacity:
    storage: 50Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /data/kafka

---
# PersistentVolumeClaim for Kafka
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kafka-pvc
  namespace: crypto
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi

---
# Zookeeper Service (Headless for StatefulSet)
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: crypto
spec:
  ports:
  - port: 2181
    name: client
  - port: 2888
    name: server
  - port: 3888
    name: leader-election
  clusterIP: None
  selector:
    app: zookeeper

---
# Zookeeper StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: crypto
spec:
  serviceName: zookeeper
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: confluentinc/cp-zookeeper:7.4.0
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        env:
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          tcpSocket:
            port: 2181
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - echo stat | nc -w 2 localhost 2181 | grep Mode
          initialDelaySeconds: 10
          periodSeconds: 5

---
# Kafka Service (Headless for StatefulSet)
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: crypto
spec:
  ports:
  - port: 9092
    name: broker
  clusterIP: None
  selector:
    app: kafka

---
# Kafka Broker Service (for external access)
apiVersion: v1
kind: Service
metadata:
  name: kafka-bootstrap
  namespace: crypto
spec:
  type: ClusterIP
  ports:
  - port: 9092
    targetPort: 9092
  selector:
    app: kafka

---
# Kafka StatefulSet (3 replicas)
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: crypto
spec:
  serviceName: kafka
  replicas: 3
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:7.4.0
        ports:
        - containerPort: 9092
          name: broker
        env:
        - name: KAFKA_BROKER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper-0.zookeeper:2181"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka-0.kafka:9092,PLAINTEXT://kafka-1.kafka:9092,PLAINTEXT://kafka-2.kafka:9092"
        - name: KAFKA_LISTENERS
          value: "PLAINTEXT://0.0.0.0:9092"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: PLAINTEXT
        - name: KAFKA_LOG_RETENTION_HOURS
          value: "720"
        - name: KAFKA_LOG_SEGMENT_BYTES
          value: "1073741824"
        - name: KAFKA_NUM_PARTITIONS
          value: "3"
        - name: KAFKA_DEFAULT_REPLICATION_FACTOR
          value: "3"
        resources:
          requests:
            cpu: 1000m
            memory: 2Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        livenessProbe:
          tcpSocket:
            port: 9092
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - kafka-broker-api-versions.sh --bootstrap-server localhost:9092 | grep ApiVersion
          initialDelaySeconds: 10
          periodSeconds: 5

---
# Kafka Topics ConfigMap (for initialization)
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-topics
  namespace: crypto
data:
  create-topics.sh: |
    #!/bin/bash
    # Create topics with replication factor 3, partitions 3
    kafka-topics.sh --create --topic price_updates --partitions 3 --replication-factor 3 --bootstrap-server kafka-0.kafka:9092 --if-not-exists
    kafka-topics.sh --create --topic sentiment_scores --partitions 3 --replication-factor 3 --bootstrap-server kafka-0.kafka:9092 --if-not-exists
    kafka-topics.sh --create --topic portfolio_updates --partitions 3 --replication-factor 3 --bootstrap-server kafka-0.kafka:9092 --if-not-exists
    echo "Topics created successfully"
