---
# Kubernetes Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: crypto
  labels:
    name: crypto

---
# ConfigMap for environment variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: crypto-config
  namespace: crypto
data:
  LOG_LEVEL: "INFO"
  ENVIRONMENT: "production"
  KAFKA_BROKERS: "kafka-0.kafka:9092,kafka-1.kafka:9092,kafka-2.kafka:9092"
  DATABASE_URL: "postgresql://crypto_user:crypto_password@postgres-primary:5432/crypto_db"
  REDIS_URL: "redis://redis:6379/0"
  JWT_ALGORITHM: "HS256"
  JWT_EXPIRATION_HOURS: "24"

---
# Secrets for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: crypto-secrets
  namespace: crypto
type: Opaque
stringData:
  JWT_SECRET_KEY: "your-super-secret-key-change-in-production"
  DB_PASSWORD: "crypto_password"
  NEWSAPI_KEY: ""

---
# PersistentVolume for PostgreSQL
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
  namespace: crypto
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /data/postgres

---
# PersistentVolumeClaim for PostgreSQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: crypto
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: crypto
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: crypto_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: crypto-secrets
              key: DB_PASSWORD
        - name: POSTGRES_DB
          value: crypto_db
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U crypto_user -d crypto_db
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U crypto_user -d crypto_db
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-primary
  namespace: crypto
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# Redis StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: crypto
spec:
  serviceName: redis
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - "--appendonly"
        - "yes"
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: crypto
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
