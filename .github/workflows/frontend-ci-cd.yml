name: Frontend CI/CD

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-*'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'frontend/**'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Check code formatting
        run: npm run format -- --check
        continue-on-error: true

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript compiler
        run: npx tsc --noEmit

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test -- --coverage --watchAll=false

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

      - name: Check coverage threshold
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Coverage is below 80%"
            exit 1
          fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, type-check, test]
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_WS_URL: ${{ secrets.NEXT_PUBLIC_WS_URL }}

      - name: Analyze bundle
        run: npm run build -- --analyze || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: next-build
          path: frontend/.next
          retention-days: 7

      - name: Check build output
        run: |
          if [ ! -d ".next" ]; then
            echo "Build output missing"
            exit 1
          fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate || true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build application
        working-directory: frontend
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: https://api.cryptoanalytics.com
          NEXT_PUBLIC_WS_URL: wss://api.cryptoanalytics.com/ws

      - name: Run Lighthouse
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './frontend/lighthouserc.json'
        continue-on-error: true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security, lighthouse]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: next-build
          path: frontend/.next

      - name: Deploy to staging
        run: |
          # Deploy to staging environment
          # Example: Deploy to Vercel, Netlify, or custom server
          echo "Deploying to staging..."
          
          # Option 1: Vercel
          # npm i -g vercel
          # vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_SCOPE }}

          # Option 2: AWS S3 + CloudFront
          # aws s3 sync frontend/.next s3://staging-bucket/ --delete
          # aws cloudfront create-invalidation --distribution-id ${{ secrets.CF_DIST_ID }} --paths "/*"

          # Option 3: Custom server
          # scp -r frontend/.next ${{ secrets.STAGING_SERVER }}:/var/www/crypto-analytics/
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_SCOPE: ${{ secrets.VERCEL_SCOPE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Smoke tests on staging
        run: |
          # Wait for deployment
          sleep 10
          
          # Basic health checks
          curl -f https://staging.cryptoanalytics.com/api/health || exit 1
          echo "✓ Staging deployment successful"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security, lighthouse]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://cryptoanalytics.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: next-build
          path: frontend/.next

      - name: Verify production ready
        run: |
          echo "Running production readiness checks..."
          
          # Check if all tests passed
          if [ ${{ needs.test.result }} != 'success' ]; then
            echo "Tests failed - cannot deploy"
            exit 1
          fi
          
          # Check if build succeeded
          if [ ! -d "frontend/.next" ]; then
            echo "Build artifacts missing"
            exit 1
          fi
          
          echo "✓ Production readiness verified"

      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          
          # Deploy with zero-downtime strategy
          # Option 1: Vercel (automatic)
          # Option 2: Blue-green deployment
          # Option 3: Canary deployment
          
          # Deploy command (example)
          # vercel --prod --token ${{ secrets.VERCEL_TOKEN_PROD }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN_PROD }}

      - name: Health check
        run: |
          echo "Running health checks..."
          
          for i in {1..30}; do
            if curl -f https://cryptoanalytics.com/api/health; then
              echo "✓ Production deployment healthy"
              exit 0
            fi
            echo "Attempt $i/30 failed, retrying..."
            sleep 10
          done
          
          echo "✗ Production health check failed"
          exit 1

      - name: Smoke tests
        run: |
          # Run basic smoke tests
          curl -f https://cryptoanalytics.com/ || exit 1
          curl -f https://cryptoanalytics.com/api/health || exit 1
          echo "✓ Smoke tests passed"

      - name: Notify deployment
        if: success()
        run: |
          # Send Slack notification
          curl -X POST ${{ secrets.SLACK_WEBHOOK }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "🚀 Frontend deployed to production",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Frontend Deployment*\n*Status:* ✅ Success\n*Environment:* Production\n*Commit:* `${{ github.sha }}`\n*Author:* ${{ github.actor }}"
                  }
                }
              ]
            }'

  rollback:
    name: Rollback (Manual)
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]

    steps:
      - name: Rollback production
        run: |
          echo "Rolling back production deployment..."
          
          # Rollback command (example)
          # vercel rollback --token ${{ secrets.VERCEL_TOKEN_PROD }}
          
          # Or revert to previous version
          # aws s3 sync s3://previous-build s3://production-bucket/ --delete
          
          echo "✓ Rollback completed"

      - name: Notify rollback
        run: |
          # Send Slack alert
          curl -X POST ${{ secrets.SLACK_WEBHOOK }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "⚠️ Frontend deployment rolled back",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Frontend Rollback*\n*Status:* ⚠️ Rolled back\n*Environment:* Production\n*Reason:* Deployment failed\n*Author:* ${{ github.actor }}"
                  }
                }
              ]
            }'

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint, type-check, test, build]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "## Frontend CI/CD Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Type Check | ${{ needs.type-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Frontend CI/CD Results
              
              - ✅ Lint: ${{ needs.lint.result }}
              - ✅ Type Check: ${{ needs.type-check.result }}
              - ✅ Tests: ${{ needs.test.result }}
              - ✅ Build: ${{ needs.build.result }}
              
              [View workflow run](${context.payload.pull_request.html_url}/checks)`
            })
