name: Backend Tests & Quality

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - '**.py'
      - 'docker-compose.yml'
      - '.github/workflows/backend-tests.yml'
      - 'pytest.ini'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - '**.py'
      - 'docker-compose.yml'
      - '.github/workflows/backend-tests.yml'

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint flake8 black isort
      
      - name: Run flake8 linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
      - name: Check code formatting with black
        run: black --check --line-length=100 .
      
      - name: Check import sorting with isort
        run: isort --check-only --profile black .

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install base dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r shared/requirements-base.txt
          pip install pytest pytest-asyncio pytest-cov coverage
      
      - name: Install service dependencies
        run: |
          pip install -r user_service/requirements.txt
          pip install -r analytics_service/requirements.txt
          pip install -r market_data_service/requirements.txt
          pip install -r sentiment_service/requirements.txt
          pip install -r portfolio_service/requirements.txt
          pip install -r api_gateway/requirements.txt
      
      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost/test_db" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "LOG_LEVEL=INFO" >> $GITHUB_ENV
      
      - name: Run User Service tests
        run: |
          cd user_service
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term --tb=short
      
      - name: Run Analytics Service tests
        run: |
          cd analytics_service
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term --tb=short
      
      - name: Run Market Data Service tests
        run: |
          cd market_data_service
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term --tb=short
      
      - name: Run Sentiment Service tests
        run: |
          cd sentiment_service
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term --tb=short
      
      - name: Run Portfolio Service tests
        run: |
          cd portfolio_service
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term --tb=short
      
      - name: Run API Gateway tests
        run: |
          cd api_gateway
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term --tb=short
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          fail_ci_if_error: false

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [user_service, market_data_service, analytics_service, sentiment_service, portfolio_service, api_gateway, frontend]
      fail-fast: false
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r shared/requirements-base.txt
          pip install -r api_gateway/requirements.txt
          pip install httpx websockets pytest pytest-asyncio
      
      - name: Run E2E tests
        run: |
          pytest tests/e2e_tests.py -v --tb=short
        continue-on-error: true
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost/test_db
          REDIS_URL: redis://localhost:6379/0
