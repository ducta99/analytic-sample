name: Deploy to Production

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  SERVICES: user_service market_data_service analytics_service sentiment_service portfolio_service api_gateway

jobs:
  verify-tests:
    name: Verify All Tests Pass
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Check backend tests status
        run: |
          echo "Verifying backend tests..."
          # This could check a test results file or API endpoint
      
      - name: Check frontend tests status
        run: |
          echo "Verifying frontend tests..."
          # This could check a test results file or API endpoint

  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [verify-tests]
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [user_service, market_data_service, analytics_service, sentiment_service, portfolio_service, api_gateway, frontend]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-k8s:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://cryptoanalytics.example.com
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
      
      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      
      - name: Update image tags
        run: |
          # Update k8s manifests with new image tags
          cd k8s
          for file in *.yaml; do
            sed -i "s|IMAGE_TAG|${{ github.sha }}|g" "$file"
            sed -i "s|REGISTRY|${{ env.REGISTRY }}|g" "$file"
          done
      
      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f k8s/01-infrastructure.yaml
          kubectl apply -f k8s/02-services.yaml
          kubectl apply -f k8s/03-ingress.yaml
          kubectl apply -f k8s/04-kafka.yaml
          kubectl apply -f k8s/05-portfolio-monitoring.yaml
          kubectl apply -f k8s/06-monitoring.yaml
          kubectl apply -f k8s/07-grafana.yaml
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/api-gateway -n crypto-analytics --timeout=5m
          kubectl rollout status deployment/user-service -n crypto-analytics --timeout=5m
          kubectl rollout status deployment/market-data-service -n crypto-analytics --timeout=5m
          kubectl rollout status deployment/analytics-service -n crypto-analytics --timeout=5m
      
      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands here
      
      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to production ${{ job.status }}
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-k8s]
    if: failure()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
      
      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      
      - name: Perform rollback
        run: |
          echo "Rolling back deployment..."
          kubectl rollout undo deployment/api-gateway -n crypto-analytics
          kubectl rollout undo deployment/user-service -n crypto-analytics
          kubectl rollout undo deployment/market-data-service -n crypto-analytics
          kubectl rollout undo deployment/analytics-service -n crypto-analytics
      
      - name: Verify rollback
        run: |
          kubectl rollout status deployment/api-gateway -n crypto-analytics --timeout=5m
          kubectl rollout status deployment/user-service -n crypto-analytics --timeout=5m
      
      - name: Send rollback notification
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            Deployment failed, rollback completed
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Delete old images from registry
        uses: snok/container-retention-policy@v2
        with:
          image-names: |
            ${{ github.repository }}/api_gateway
            ${{ github.repository }}/user_service
            ${{ github.repository }}/market_data_service
            ${{ github.repository }}/analytics_service
            ${{ github.repository }}/sentiment_service
            ${{ github.repository }}/portfolio_service
            ${{ github.repository }}/frontend
          cut-off: A week ago UTC
          keep-latest: 5
          account-type: personal
          token: ${{ secrets.GITHUB_TOKEN }}
